buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.openapi.generator" version "4.3.1"
}

apply plugin: 'kotlin'
apply plugin: 'application'

group 'oslokommune.ombruk'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
    implementation "io.ktor:ktor-metrics:$ktor_version"
    implementation "io.ktor:ktor-server-sessions:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}

def apiYml = "$rootDir/resources/api.yml".toString()

/* java client configuration */
task buildSomething(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin-server"
    inputSpec = apiYml
    outputDir = "$buildDir/generated".toString()

    groupId = "$project.group"
    id = "$project.name-generated"
    version = "$project.version"
    apiPackage = "oslokommune.ombruk.api"
    invokerPackage = "oslokommune.ombruk.api.invoker"
    modelPackage = "oslokommune.ombruk.api.model"
    enablePostProcessFile = true
    skipOverwrite = false
    systemProperties = [
            modelDocs: "true"
    ]
}

task generateCode(type: Copy, dependsOn: ['buildSomething']) {

    def srcPath = "$buildDir/generated"
    def targetPath = "$rootDir/docs"

    // copy docs
    from(srcPath + "/docs")
    into(targetPath)
    include('*.md')
}

// code will be generated during compilation
compileJava.dependsOn(generateCode)


// attach the generated folder as source for this project
sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}